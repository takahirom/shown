// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

(function(jQuery) {
  var $;
  $ = jQuery;
  return $.fn.shown = function(method) {
    var Box, FadeInBox, FragmentBox, LeftMoveBox, LeftMoveStopBox, RightMoveBox, RightMoveStopBox, bindScroll, methods;
    Box = (function() {

      function Box(element) {
        this.element = element;
      }

      Box.prototype.setPosition = function(x, y) {
        return this.element.css({
          "transform": "translate3d(" + x + "px," + y + "px,0)",
          "-moz-transform": "translate3d(" + x + "px," + y + "px,0)",
          "-o-transform": "translate3d(" + x + "px," + y + "px,0)",
          "-webkit-transform": "translate3d(" + x + "px," + y + "px,0)",
          "-ms-transform": "translate3d(" + x + "px," + y + "px,0)"
        });
      };

      /*
                  サブクラスが必ず実装しないといけないスクロールするごとに実行されるメソッド 
                  abstractメソッドにしたかったが仕方がわからなかった
                  parsentは画面上でどのぐらいの位置にいるか割合
      */


      Box.prototype.calc = function(parsent) {};

      Box.prototype.setAbsolute = function() {
        return this.element.css({
          "position": "absolute"
        });
      };

      return Box;

    })();
    LeftMoveBox = (function(_super) {

      __extends(LeftMoveBox, _super);

      function LeftMoveBox() {
        return LeftMoveBox.__super__.constructor.apply(this, arguments);
      }

      LeftMoveBox.prototype.calc = function(parsent) {
        var boxLeft;
        if ((101 > parsent && parsent > -1)) {
          boxLeft = (parsent * 0.01) * $(window).width() + ((100 - parsent) * 0.01) * (0 - this.element.width());
          return this.setPosition(boxLeft, 0);
        }
      };

      return LeftMoveBox;

    })(Box);
    RightMoveBox = (function(_super) {

      __extends(RightMoveBox, _super);

      function RightMoveBox() {
        return RightMoveBox.__super__.constructor.apply(this, arguments);
      }

      RightMoveBox.prototype.calc = function(parsent) {
        var boxLeft;
        if ((101 > parsent && parsent > -1)) {
          boxLeft = parsent * 0.01 * (0 - this.element.width()) + (100 - parsent) * 0.01 * $(window).width();
          return this.setPosition(boxLeft, 0);
        }
      };

      return RightMoveBox;

    })(Box);
    FadeInBox = (function(_super) {

      __extends(FadeInBox, _super);

      FadeInBox.fadeIned = false;

      function FadeInBox(element) {
        element.css('visibility', 'hidden');
        FadeInBox.__super__.constructor.call(this, element);
      }

      FadeInBox.prototype.calc = function(parsent) {
        if ((150 > parsent && parsent > -30)) {
          if (this.fadeIned === false && 100 > parsent) {
            this.fadeIned = true;
            this.element.hide();
            return this.element.css('visibility', 'visible').hide().fadeIn();
          }
        } else {
          this.element.css('visibility', 'hidden');
          return this.fadeIned = false;
        }
      };

      return FadeInBox;

    })(Box);
    LeftMoveStopBox = (function(_super) {

      __extends(LeftMoveStopBox, _super);

      function LeftMoveStopBox() {
        return LeftMoveStopBox.__super__.constructor.apply(this, arguments);
      }

      LeftMoveStopBox.prototype.calc = function(parsent) {
        var boxLeft;
        if ((250 > parsent && parsent > 52)) {
          boxLeft = parsent * 0.01 * (0 - this.element.outerWidth()) + (100 - parsent) * 0.01 * $(window).width() - this.element.outerWidth() / 2;
        } else {
          parsent = 52;
          boxLeft = parsent * 0.01 * (0 - this.element.outerWidth()) + (100 - parsent) * 0.01 * $(window).width() - this.element.outerWidth() / 2;
        }
        return this.setPosition(boxLeft, 0);
      };

      return LeftMoveStopBox;

    })(Box);
    RightMoveStopBox = (function(_super) {

      __extends(RightMoveStopBox, _super);

      function RightMoveStopBox() {
        return RightMoveStopBox.__super__.constructor.apply(this, arguments);
      }

      RightMoveStopBox.prototype.calc = function(parsent) {
        var boxLeft;
        if ((250 > parsent && parsent > 52)) {
          boxLeft = (parsent * 0.01) * $(window).width() + ((100 - parsent) * 0.01) * (0 - this.element.outerWidth()) + this.element.outerWidth() / 2;
        } else {
          parsent = 52;
          boxLeft = (parsent * 0.01) * $(window).width() + ((100 - parsent) * 0.01) * (0 - this.element.outerWidth()) + this.element.outerWidth() / 2;
        }
        return this.setPosition(boxLeft, 0);
      };

      return RightMoveStopBox;

    })(Box);
    FragmentBox = (function(_super) {

      __extends(FragmentBox, _super);

      function FragmentBox(element, fragmentGoal) {
        this.fragmentGoal = fragmentGoal;
        this.startX = element.offset().left;
        this.startY = element.offset().top;
        this.xDistance = this.fragmentGoal.offset().left + this.fragmentGoal.width() / 2 - this.startX;
        this.yDistance = this.fragmentGoal.offset().top + this.fragmentGoal.height() / 2 - this.startY;
        this.dX = 0;
        this.dY = 0;
        FragmentBox.__super__.constructor.call(this, element);
      }

      FragmentBox.prototype.calc = function(parsent) {
        var parsent2;
        parsent2 = (parsent * 0.01) * (parsent * 0.01) * 100;
        if (0 > parsent2) {
          parsent2 = 0;
          return this.setPosition(this.xDistance * parsent2 * 0.01, this.yDistance * parsent2 * 0.01);
        } else if ((50 > parsent2 && parsent2 > 0)) {
          return this.setPosition(this.xDistance * parsent2 * 0.01, this.yDistance * parsent2 * 0.01);
        } else if ((100 > parsent2 && parsent2 > 49)) {
          parsent2 = 100 - parsent2;
          return this.setPosition(this.xDistance * parsent2 * 0.01, this.yDistance * parsent2 * 0.01);
        } else if (parsent2 > 100) {
          parsent2 = 0;
          return this.setPosition(this.xDistance * parsent2 * 0.01, this.yDistance * parsent2 * 0.01);
        }
      };

      return FragmentBox;

    })(Box);
    /*
            スクロールとelementを結びつける 
            element($('#test')などのセレクタでとったもの)とsprite(Boxクラスのサブクラスのインスタンス)を別に引数でとっている理由は、
            他のelementの場所に合わせて実行したい場合のため、例えばFragmentクラスの時のため
    */

    bindScroll = function(element, sprite) {
      $(document).bind('touchmove', function(e) {
        return e.preventDefault();
      }).bind('iscroll', function(e, pos) {
        var parsent;
        parsent = (element.offset().top + element.height() / 2) * 100 / $(window).height();
        return sprite.calc(parsent);
      });
      return $(window).scroll(function(e) {
        var parsent;
        parsent = (element.offset().top - $(window).scrollTop() + element.height() / 2) * 100 / $(window).height();
        return sprite.calc(parsent);
      });
    };
    methods = {
      leftMove: function() {
        var sprite;
        sprite = new LeftMoveBox($(this));
        return bindScroll(this, sprite);
      },
      rightMove: function() {
        var sprite;
        sprite = new RightMoveBox($(this));
        return bindScroll(this, sprite);
      },
      fadeIn: function() {
        var sprite;
        sprite = new FadeInBox($(this));
        return bindScroll(this, sprite);
      },
      leftMoveStop: function() {
        var sprite;
        sprite = new LeftMoveStopBox($(this));
        return bindScroll(this, sprite);
      },
      rightMoveStop: function() {
        var sprite;
        sprite = new RightMoveStopBox($(this));
        return bindScroll(this, sprite);
      },
      fragment: function(fragmentGoal) {
        var sprite;
        sprite = new FragmentBox($(this), fragmentGoal);
        return bindScroll(fragmentGoal, sprite);
      }
    };
    if (methods[method]) {
      return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
    } else if (typeof method === 'object' || !method) {
      return methods.init.apply(this, arguments);
    } else {
      return $.error('Method ' + method + ' does not exist on jQuery.tooltip');
    }
  };
})(jQuery);
